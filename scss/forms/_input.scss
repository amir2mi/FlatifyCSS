:root {
	--#{$CSS_VAR_PFX}input-bg-color: var(--#{$CSS_VAR_PFX}bg-color-dark);
	--#{$CSS_VAR_PFX}input-txt-color: var(--#{$CSS_VAR_PFX}txt-color);
	--#{$CSS_VAR_PFX}input-border-color: var(--#{$CSS_VAR_PFX}bg-color-darker);
	--#{$CSS_VAR_PFX}input-border-color__focus: var(--#{$CSS_VAR_PFX}color-accent-primary);
	--#{$CSS_VAR_PFX}input-border-color__valid: var(--#{$CSS_VAR_PFX}color-success-primary);
	--#{$CSS_VAR_PFX}input-border-color__warning: var(--#{$CSS_VAR_PFX}color-warning-primary);
	--#{$CSS_VAR_PFX}input-border-color__invalid: var(--#{$CSS_VAR_PFX}color-danger-primary);
}

// Input wrapper to add [::before] & [::after] for input styles
.input-wrapper {
	position: relative;
	display: flex;
	align-items: center;

	input {
		width: 100%;

		@if $SUPPORT_LTR {
			padding-right: 3em;
		} @else {
			padding-left: 3em;
		}
	}

	&.toggle-password,
	&.invalid,
	&.warning,
	&.valid {
		input {
			@if $SUPPORT_LTR {
				padding-right: 3.5em;
			} @else {
				padding-left: 3.5em;
			}
		}

		&:after {
			content: " ";
			position: absolute;
			top: 0;
			bottom: 0;
			z-index: 1;
			margin: auto 0;
			border-radius: var(--#{$CSS_VAR_PFX}border-radius);
			transition: all var(--#{$CSS_VAR_PFX}simple-transition);
		}
	}

	&.invalid {
		&:after {
			@if $SUPPORT_LTR {
				right: 1.35em;
			} @else {
				left: 1.35em;
			}

			width: 1em;
			height: 0.25em;
			background: var(--#{$CSS_VAR_PFX}input-border-color__invalid);
		}
	}

	&.warning {
		&:after {
			@if $SUPPORT_LTR {
				right: 1.55em;
			} @else {
				left: 1.55em;
			}

			width: 0.5em;
			height: 0.5em;
			background: var(--#{$CSS_VAR_PFX}input-border-color__warning);
		}

		&:focus-within:after {
			animation: flatify-fade-out 1s infinite;
		}
	}

	&.valid {
		&:before {
			content: " ";
			position: absolute;
			top: 0.45em;
			bottom: 0;
			z-index: 1;
			margin: auto 0;
			border-radius: var(--#{$CSS_VAR_PFX}border-radius);
			transition: all var(--#{$CSS_VAR_PFX}simple-transition);
			// This animation will be played on state change because invalid or warning
			// does not have [::before] so it will get flashed without this animation, that is bad.
			animation: flatify-fade-in 0.35s;

			@if $SUPPORT_LTR {
				right: 1.75em;
			} @else {
				left: 1.75em;
			}

			width: 0.64em;
			height: 0.25em;
			background: var(--#{$CSS_VAR_PFX}input-border-color__valid);
			transform: rotate(45deg);
		}

		&:after {
			@if $SUPPORT_LTR {
				right: 1em;
			} @else {
				left: 1em;
			}

			width: 1.2em;
			height: 0.25em;
			background: var(--#{$CSS_VAR_PFX}input-border-color__valid);
			transform: rotate(-55deg);
		}
	}

	.show-password-button {
		position: absolute;
		top: 0;
		bottom: 0;
		// should be over [.input-wrapper] ::before and ::after
		z-index: 3;
		@if $SUPPORT_LTR {
			right: 0.5em;
		} @else {
			left: 0.5em;
		}
		font-size: 1em;
		width: 2.5em;
		height: 2.5em;
		padding: 0.5em;
		margin: auto 0;
		color: var(--#{$CSS_VAR_PFX}input-txt-color);
		background: transparent;
		border: none;
		border-radius: calc(var(--#{$CSS_VAR_PFX}border-radius) * 0.75);

		@media (prefers-reduced-motion: no-preference) {
			&:active,
			&:focus-visible {
				&:before {
					transform: scale(0.85) !important;
				}
			}
		}

		&:before {
			content: "";
			display: block;
			width: 100%;
			height: 100%;
			background-color: currentColor;
			mask: var(--#{$CSS_VAR_PFX}eye-icon) no-repeat 50% 50%;
			-webkit-mask: var(--#{$CSS_VAR_PFX}eye-icon) no-repeat 50% 50%;
			transition: all var(--#{$CSS_VAR_PFX}simple-transition);
		}

		&:after {
			content: " ";
			position: absolute;
			@if $SUPPORT_LTR {
				right: 0.5em;
			} @else {
				left: 0.5em;
			}
			top: 0;
			bottom: 0;
			z-index: 1;
			width: 1.5em;
			height: 0.18em;
			margin: auto 0;
			background: currentColor;
			border-radius: var(--#{$CSS_VAR_PFX}border-radius);
			transform: rotate(-30deg);
			clip-path: circle(200% at right);
			transition: all var(--#{$CSS_VAR_PFX}bouncing-transition);
		}
	}

	&.visible-password .show-password-button {
		&:after {
			clip-path: circle(0% at right);
		}
	}
}

input:not(.default) {
	font-size: 0.9em;
	padding: 0.8em 1em;
	margin: 0.38em 0;
	color: var(--#{$CSS_VAR_PFX}input-txt-color);
	background: var(--#{$CSS_VAR_PFX}input-bg-color);
	border: var(--#{$CSS_VAR_PFX}border-width) solid var(--#{$CSS_VAR_PFX}input-border-color);
	border-radius: var(--#{$CSS_VAR_PFX}border-radius);
	filter: brightness(100%);
	outline: none !important;
	will-change: filter;
	transition: all var(--#{$CSS_VAR_PFX}simple-transition);

	&:hover,
	&:focus {
		filter: brightness(95%);
	}

	&:focus {
		border-color: var(--#{$CSS_VAR_PFX}input-border-color__focus) !important;
	}

	&::placeholder {
		color: inherit;
		opacity: 0.45;
		transition: all var(--#{$CSS_VAR_PFX}simple-transition);
	}

	&:focus::placeholder {
		// hide placeholder on focus
		opacity: 0;
	}

	&[class*="style-"] {
		--#{$CSS_VAR_PFX}input-bg-color: var(--#{$CSS_VAR_PFX}local-bg-color);
		--#{$CSS_VAR_PFX}input-txt-color: var(--#{$CSS_VAR_PFX}local-txt-color);
		--#{$CSS_VAR_PFX}input-border-color: var(--#{$CSS_VAR_PFX}local-border-color);
		--#{$CSS_VAR_PFX}input-border-color__focus: var(--#{$CSS_VAR_PFX}local-txt-color);
	}

	.input-wrapper.invalid &,
	&.invalid {
		border-color: var(--#{$CSS_VAR_PFX}input-border-color) !important;
		--#{$CSS_VAR_PFX}input-border-color: var(--#{$CSS_VAR_PFX}input-border-color__invalid) !important;
		--#{$CSS_VAR_PFX}input-border-color__focus: var(--#{$CSS_VAR_PFX}input-border-color__invalid) !important;
	}

	&:focus:invalid {
		--#{$CSS_VAR_PFX}input-border-color__focus: var(--#{$CSS_VAR_PFX}input-border-color__invalid) !important;
	}

	.input-wrapper.warning &,
	&.warning {
		border-color: var(--#{$CSS_VAR_PFX}input-border-color) !important;
		--#{$CSS_VAR_PFX}input-border-color: var(--#{$CSS_VAR_PFX}input-border-color__warning) !important;
		--#{$CSS_VAR_PFX}input-border-color__focus: var(--#{$CSS_VAR_PFX}input-border-color__warning) !important;
	}

	.input-wrapper.valid &,
	&.valid {
		border-color: var(--#{$CSS_VAR_PFX}input-border-color) !important;
		--#{$CSS_VAR_PFX}input-border-color: var(--#{$CSS_VAR_PFX}input-border-color__valid);
		--#{$CSS_VAR_PFX}input-border-color__focus: var(--#{$CSS_VAR_PFX}input-border-color__valid);
	}

	// Just elements with [readonly] attribute instead of CSS [:read-only] that also considers [disabled] elements.
	&[readonly] {
		filter: none !important;
		--#{$CSS_VAR_PFX}input-border-color__focus: var(--#{$CSS_VAR_PFX}input-border-color) !important;
	}

	&.disabled,
	&:disabled {
		pointer-events: none;
		filter: contrast(85%) brightness(85%) opacity(70%) !important;
	}
}

// when password is entered give letters morespace.
input[type="password"]:not(:placeholder-shown) {
	letter-spacing: 0.18em;
}

input[type="color"]:not(.default) {
	width: 3.14em;
	height: 2.75em;
	padding: 0.5em;
	border-radius: calc(var(--#{$CSS_VAR_PFX}border-radius) * 0.75);
}

input[type="file"]:not(.default) {
	filter: brightness(100%);

	&::file-selector-button {
		@extend .button;
		cursor: pointer;
		font-size: 0.9em;
		color: inherit;
		filter: brightness(92%);
		vertical-align: baseline;

		@if $SUPPORT_LTR {
			margin: 0 0.75em 0 0;
		} @else {
			margin: 0 0 0 0.75em;
		}
	}
}

input[type="range"] {
	-webkit-appearance: none;
	width: 100%;
	background: transparent !important;
	border: none;
	filter: none !important;

	&::-moz-range-track {
		cursor: pointer;
		width: 100%;
		height: max(3px, calc(var(--#{$CSS_VAR_PFX}border-width) * 1.5));
		background: var(--#{$CSS_VAR_PFX}input-border-color);
		border-radius: calc(var(--#{$CSS_VAR_PFX}border-radius) * 0.5);
	}

	&::-webkit-slider-runnable-track {
		cursor: pointer;
		width: 100%;
		height: max(3px, calc(var(--#{$CSS_VAR_PFX}border-width) * 1.5));
		background: var(--#{$CSS_VAR_PFX}input-border-color);
		border-radius: calc(var(--#{$CSS_VAR_PFX}border-radius) * 0.5);
	}

	&::-moz-range-thumb {
		-webkit-appearance: none;
		cursor: pointer;
		height: 1.24em;
		width: 1.24em;
		background: var(--#{$CSS_VAR_PFX}input-bg-color);
		border-radius: calc(var(--#{$CSS_VAR_PFX}border-radius) * 0.5);
		border: max(1px, var(--#{$CSS_VAR_PFX}border-width)) solid var(--#{$CSS_VAR_PFX}input-border-color);
		transition: all var(--#{$CSS_VAR_PFX}simple-transition);
	}

	&::-webkit-slider-thumb {
		-webkit-appearance: none;
		cursor: pointer;
		height: 1.24em;
		width: 1.24em;
		margin: -0.55em; // webkit thumb should be positioned manually
		background: var(--#{$CSS_VAR_PFX}input-bg-color);
		border-radius: calc(var(--#{$CSS_VAR_PFX}border-radius) * 0.5);
		border: max(1px, var(--#{$CSS_VAR_PFX}border-width)) solid var(--#{$CSS_VAR_PFX}input-border-color);
		transition: all var(--#{$CSS_VAR_PFX}simple-transition);
	}

	&:hover::-moz-range-thumb {
		filter: brightness(90%);
	}

	&:hover::-webkit-slider-thumb {
		filter: brightness(90%);
	}

	@media (prefers-reduced-motion: no-preference) {
		&:active::-moz-range-thumb {
			transform: scale(0.9);
		}

		&:active::-webkit-slider-thumb {
			transform: scale(0.9);
		}
	}

	&:focus::-moz-range-thumb {
		border-color: var(--#{$CSS_VAR_PFX}input-border-color__focus);
		filter: brightness(90%);
	}

	&:focus::-webkit-slider-thumb {
		border-color: var(--#{$CSS_VAR_PFX}input-border-color__focus);
		filter: brightness(90%);
	}
}

// Buttons with [.button] should not have border
input[type="submit"],
input[type="reset"],
input[type="button"] {
	&.button {
		border: none !important;
	}
}
